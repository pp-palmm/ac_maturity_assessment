import streamlit as st
import pandas as pd
from datetime import datetime

# Page configuration
st.set_page_config(
    page_title="‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    page_icon="üìä",
    layout="wide"
)

# Initialize session state
if 'page' not in st.session_state:
    st.session_state.page = 1

if 'client_info' not in st.session_state:
    st.session_state.client_info = {}

if 'choices' not in st.session_state:
    st.session_state.choices = {}

# Define questions, options and scores
questions_with_scores = {
    1: {
        "question": "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏π‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô / ‡∏ó‡∏µ‡πà‡πÉ‡∏Ñ‡∏£",
        "options": {
            "‡∏£‡∏π‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏´‡∏ô": 100,
            "‡∏£‡∏π‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏´‡∏ô": 75,
            "‡∏£‡∏π‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô": 50,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    },
    2: {
        "question": "‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á",
        "options": {
            "‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (Master Data) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß": 100,
            "‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (Master Data) ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô": 75,
            "‡∏ó‡∏£‡∏≤‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Ç‡∏õ": 50,
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç": 25,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    },
    3: {
        "question": "‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å",
        "options": {
            "‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå": 100,
            "‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏™‡∏°‡∏≠": 75,
            "‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á": 50,
            "‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å": 25
        }
    },
    4: {
        "question": "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÑ‡∏´‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        "options": {
            "‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ": 100,
            "‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": 75,
            "‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏ö‡πà‡∏≠‡∏¢": 50,
            "‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ": 25
        }
    },
    5: {
        "question": "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏ô‡∏≥‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, ‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô",
        "options": {
            "‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£": 100,
            "‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô": 75,
            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î": 50,
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": 25,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    },
    6: {
        "question": "‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        "options": {
            "‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î": 100,
            "‡∏ó‡∏£‡∏≤‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î": 75,
            "‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô": 50,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    },
    7: {
        "question": "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ò‡∏£‡∏£‡∏°‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        "options": {
            "‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•": 100,
            "‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà": 75,
            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": 50,
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á": 25,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    },
    8: {
        "question": "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏°‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        "options": {
            "‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•": 100,
            "‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà": 75,
            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": 50,
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á": 25,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    },
    9: {
        "question": "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        "options": {
            "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£": 100,
            "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô": 75,
            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏•‡∏≤‡∏á": 50,
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏•‡∏≤‡∏á": 25,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    },
    10: {
        "question": "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô",
        "options": {
            "‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô": 100,
            "‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô": 75,
            "‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": 50,
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô": 25,
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö": 25
        }
    }
}

# Define maturity groups
maturity_groups = {
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£": [1, 2],
    "‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": [3, 4],
    "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": [5, 6],
    "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": [7, 8],
    "‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": [9, 10]
}

def get_maturity_level(score):
    """Determine maturity level, emoji and color based on score"""
    if score >= 85:
        return "‡∏î‡∏µ‡∏°‡∏≤‡∏Å", "üü¢", "#00CC00"  # Green
    elif score >= 65:
        return "‡∏î‡∏µ", "üü°", "#FFCC00"  # Yellow
    elif score >= 45:
        return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "üü†", "#FF9900"  # Orange
    else:
        return "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", "üî¥", "#FF3333"  # Red

def create_progress_bar(score, width=20):
    """Create a text-based progress bar"""
    filled = int((score / 100) * width)
    empty = width - filled
    return "‚ñà" * filled + "‚ñë" * empty

# Page 1: Client Information
def page_client_info():
    st.title("üìù ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°")
    
    with st.form("client_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            org_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£", value=st.session_state.client_info.get('org_name', ''))
            phone = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", value=st.session_state.client_info.get('phone', ''))
        
        with col2:
            full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", value=st.session_state.client_info.get('full_name', ''))
            email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", value=st.session_state.client_info.get('email', ''))
        
        submitted = st.form_submit_button("Next ‚û°Ô∏è", use_container_width=True)
        
        if submitted:
            if all([org_name, full_name, phone, email]):
                st.session_state.client_info = {
                    'org_name': org_name,
                    'full_name': full_name,
                    'phone': phone,
                    'email': email
                }
                st.session_state.page = 2
                st.rerun()
            else:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á")

# Page 2: Questions
def page_questions():
    st.title("üìä ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£")
    
    # Progress bar
    progress = len(st.session_state.choices) / len(questions_with_scores)
    st.progress(progress)
    st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {len(st.session_state.choices)} / {len(questions_with_scores)} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
    
    with st.form("questions_form"):
        for q_num, q_data in questions_with_scores.items():
            st.markdown(f"### ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {q_num}")
            st.markdown(q_data["question"])
            
            # Get saved answer if exists
            saved_answer = st.session_state.choices.get(f"q{q_num}", None)
            options_list = list(q_data["options"].keys())
            default_index = 0
            if saved_answer:
                try:
                    default_index = options_list.index(saved_answer)
                except ValueError:
                    default_index = 0
            
            answer = st.radio(
                f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:",
                options_list,
                key=f"q{q_num}",
                index=default_index
            )
            st.markdown("---")
        
        col1, col2 = st.columns(2)
        with col1:
            back_button = st.form_submit_button("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö", use_container_width=True)
        with col2:
            submit_button = st.form_submit_button("‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° ‚úÖ", use_container_width=True, type="primary")
        
        if back_button:
            st.session_state.page = 1
            st.rerun()
            
        if submit_button:
            # Save all answers
            for q_num in questions_with_scores.keys():
                st.session_state.choices[f"q{q_num}"] = st.session_state[f"q{q_num}"]
            st.session_state.page = 3
            st.rerun()

# Page 3: Results
def page_results():
    st.title("‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    
    # Display client information
    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°")
    col1, col2 = st.columns(2)
    with col1:
        st.write(f"**‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£:** {st.session_state.client_info.get('org_name', '')}")
        st.write(f"**‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:** {st.session_state.client_info.get('phone', '')}")
    with col2:
        st.write(f"**‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:** {st.session_state.client_info.get('full_name', '')}")
        st.write(f"**‡∏≠‡∏µ‡πÄ‡∏°‡∏•:** {st.session_state.client_info.get('email', '')}")
    
    st.markdown("---")
    
    # Calculate scores for each group
    group_scores = {}
    detailed_scores = {}
    
    for group_name, question_ids in maturity_groups.items():
        scores = []
        for q_id in question_ids:
            answer = st.session_state.choices.get(f"q{q_id}", "")
            if answer and answer in questions_with_scores[q_id]["options"]:
                score = questions_with_scores[q_id]["options"][answer]
                scores.append(score)
                detailed_scores[q_id] = {
                    "question": questions_with_scores[q_id]["question"],
                    "answer": answer,
                    "score": score
                }
        
        if scores:
            group_scores[group_name] = sum(scores) / len(scores)
    
    # Calculate overall score
    total_score = sum(group_scores.values()) / len(group_scores) if group_scores else 0
    
    # Display overall score
    st.subheader("üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{total_score:.1f}/100")
    with col2:
        st.metric("‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå", f"{total_score:.1f}%")
    with col3:
        level, emoji, color = get_maturity_level(total_score)
        st.markdown(f"### {emoji} ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {level}")
    
    # Overall progress bar
    st.markdown("**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:**")
    progress_bar = create_progress_bar(total_score, 30)
    st.markdown(f"`{progress_bar}` {total_score:.1f}%")
    
    st.markdown("---")
    
    # Display maturity assessment by group with emoji visualization
    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô (Maturity Assessment)")
    
    # Create a visual representation using emojis and text
    for group_name, score in group_scores.items():
        level, emoji, color = get_maturity_level(score)
        
        # Create a container for each group
        with st.container():
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown(f"### {emoji} {group_name}")
                progress_bar = create_progress_bar(score)
                st.markdown(f"`{progress_bar}` **{score:.1f}%** - {level}")
            
            with col2:
                # Display score in large text with color
                st.markdown(f"<h2 style='text-align: center; color: {color};'>{score:.0f}</h2>", 
                          unsafe_allow_html=True)
        
        st.markdown("")  # Add spacing
    
    # Legend
    st.markdown("---")
    st.markdown("### üìã ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown("üü¢ **‡∏î‡∏µ‡∏°‡∏≤‡∏Å** (85-100%)")
    with col2:
        st.markdown("üü° **‡∏î‡∏µ** (65-84%)")
    with col3:
        st.markdown("üü† **‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á** (45-64%)")
    with col4:
        st.markdown("üî¥ **‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á** (0-44%)")
    
    st.markdown("---")
    
    # Display detailed scores by group
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πâ‡∏≤‡∏ô")
    
    for group_name, question_ids in maturity_groups.items():
        with st.expander(f"{group_name} - {group_scores[group_name]:.1f}%"):
            for q_id in question_ids:
                if q_id in detailed_scores:
                    detail = detailed_scores[q_id]
                    st.write(f"**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {q_id}:** {detail['question'][:50]}...")
                    st.write(f"‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {detail['answer']}")
                    st.write(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {detail['score']}/100")
                    st.markdown("---")
    
    # Export options
    st.markdown("---")
    st.subheader("üì• ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # Prepare data for export
    export_data = []
    for q_id, detail in detailed_scores.items():
        export_data.append({
            "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà": q_id,
            "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°": detail["question"],
            "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö": detail["answer"],
            "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô": detail["score"]
        })
    
    # Add group scores
    for group_name, score in group_scores.items():
        export_data.append({
            "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà": f"‡∏Å‡∏•‡∏∏‡πà‡∏°: {group_name}",
            "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°": "",
            "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö": "",
            "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô": f"{score:.1f}"
        })
    
    export_data.append({
        "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà": "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°",
        "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°": "",
        "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö": "",
        "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô": f"{total_score:.1f}"
    })
    
    df_export = pd.DataFrame(export_data)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Create CSV
        csv_data = df_export.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
            data=csv_data,
            file_name=f"assessment_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    
    with col2:
        # Print button
        if st.button("üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå", use_container_width=True):
            st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Print ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå (Ctrl+P ‡∏´‡∏£‡∏∑‡∏≠ Cmd+P)")
    
    with col3:
        # New assessment button
        if st.button("üìù ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà", use_container_width=True):
            # Reset session state
            st.session_state.page = 1
            st.session_state.client_info = {}
            st.session_state.choices = {}
            st.rerun()
    
    # Recommendations based on scores
    st.markdown("---")
    st.subheader("üí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞")
    
    # Find areas that need improvement
    weak_areas = [(group, score) for group, score in group_scores.items() if score < 65]
    
    if weak_areas:
        st.warning("**‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å:**")
        for area, score in sorted(weak_areas, key=lambda x: x[1]):
            st.write(f"- {area} (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score:.1f}%)")
    else:
        st.success("‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô!")

# Main app logic
def main():
    # Custom CSS
    st.markdown("""
    <style>
    .stButton > button {
        height: 3rem;
        font-size: 1.1rem;
    }
    .stRadio > div {
        padding-left: 1rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Page routing
    if st.session_state.page == 1:
        page_client_info()
    elif st.session_state.page == 2:
        page_questions()
    elif st.session_state.page == 3:
        page_results()

if __name__ == "__main__":
    main()